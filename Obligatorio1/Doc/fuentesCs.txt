***********************************
Archivo: Sistema.cs
Carpeta: C:\Users\matia\OneDrive\Desktop\obligatorioP2\Obligatorio1\Dominio\Sistema.cs
***********************************
using Dominio.Entidades;
namespace Dominio
{
    public class Sistema
    {
        private List<Usuario> _usuarios = new List<Usuario>();
        private List<Publicacion> _publicaciones = new List<Publicacion>();
        private List<Articulo> _articulos = new List<Articulo>();
        private List<Cliente> _clientes = new List<Cliente>();
        private List<Administrador> _administradores = new List<Administrador>();
        private List<Subasta> _subastas = new List<Subasta>();
        private List<Venta> _ventas = new List<Venta>();

        public List<Usuario> Usuarios
        {
            get { return _usuarios; }
        }

        public List<Publicacion> Publicaciones
        {
            get { return _publicaciones; }
        }

        public List<Articulo> Articulos
        {
            get { return _articulos; }
        }

        public List<Cliente> Clientes
        {
            get { return _clientes; }
        }

        public List<Administrador> Administradores
        {
            get { return _administradores; }
        }

        public List<Subasta> Subastas
        {
            get { return _subastas; }
        }

        public List<Venta> Ventas
        {
            get { return _ventas; }
        }




        public void AgregarCliente(Cliente cliente)
        {
            if (cliente == null) throw new Exception("Debe tener un valor!");
            cliente.Validar();
            _clientes.Add(cliente);
        }

        public Cliente BuscarClientes(string nombre)
        {
            Cliente? clienteEncontrado = null;
            foreach (Cliente i in _clientes)
            {
                clienteEncontrado = i.Nombre == nombre ? i : null;
            }
            return clienteEncontrado;
        }


        //Metodos Administrador
        public void AgregarAdministrador(Administrador administrador)
        {
            if (administrador == null) throw new Exception("Debe tener un valor!");
            administrador.Validar();
            _administradores.Add(administrador);
        }

        public Administrador BuscarAdministrador(string nombre)
        {
            Administrador? adminEncontrado = null;
            foreach (Administrador i in _administradores)
            {
                adminEncontrado = i.Nombre == nombre ? i : null;
            }
            return adminEncontrado;
        }



        public void AgregarArticulo(Articulo articulo)
        {
            if (articulo == null) throw new Exception("El articulo cargado es nulo");
            articulo.Validar();
            _articulos.Add(articulo);


        }


        public void AgregarSubasta(Subasta subasta)
        {
            if (subasta == null) throw new Exception("La carga de la subasta no puede esta vacia");
            subasta.Validar();
            _subastas.Add(subasta);
        }

        public void AgregarVenta(Venta venta)
        {
            if (venta == null) throw new Exception("La carga de la venta no puede ser nula");
            venta.Validar();
            _ventas.Add(venta);
        }


        public void PrecargarDatos()
        {
            //Precarga de clientes
            AgregarCliente(new Cliente("Juan", "Pérez", "juan.perez@mail.com", "password1", 1000));
            AgregarCliente(new Cliente("Ana", "Gómez", "ana.gomez@mail.com", "password2", 1500));
            AgregarCliente(new Cliente("Carlos", "Lopez", "carlos.lopez@mail.com", "password3", 2000));

            //Precarga de Administradores
            AgregarAdministrador(new Administrador("Marta", "Suarez", "marta.suarez@mail.com", "admin1"));
            AgregarAdministrador(new Administrador("Luis", "Ramirez", "luis.ramirez@mail.com", "admin2"));
            AgregarAdministrador(new Administrador("Sofia", "Martinez", "sofia.martinez@mail.com", "admin3"));

            //Precarga de articulos
            AgregarArticulo(new Articulo("Balde", "playa", 350));
            AgregarArticulo(new Articulo("sombrilla", "playa", 150));
            AgregarArticulo(new Articulo("protector solar", "playa", 400));
            AgregarArticulo(new Articulo("salvavidas", "playa", 110));
            AgregarArticulo(new Articulo("Bicicleta de carrera", "ciclismo", 15000));

            //Precarga de Subastas
            //AgregarSubasta(new Subasta("Vuelta ciclista", "ABIERTA", new DateTime(2024, 09, 01, 00, 00, 00),, 1235, new DateTime(2024, 09, 24, 00, 00, 00)));



            //Precargas de ventas
            //_sistema.AgregarVenta(new Venta());


        }

    }
}

***********************************
Archivo: Administrador.cs
Carpeta: C:\Users\matia\OneDrive\Desktop\obligatorioP2\Obligatorio1\Dominio\Entidades\Administrador.cs
***********************************
namespace Dominio.Entidades
{
    public class Administrador : Usuario
    {
        public bool Admin { get; }

        public Administrador(string nombre, string apellido, string email, string contrasenia) :
            base(nombre, apellido, email, contrasenia)
        {
            Admin = true;
        }
        public void Validar()
        {
            //todo:Agregar validaciones de Articulo
        }

        public override string ToString()
        {
            string respuesta = base.ToString();
            if (Admin) respuesta += $"Soy administrador \n";
            return respuesta;
        }

    }
}

***********************************
Archivo: Articulo.cs
Carpeta: C:\Users\matia\OneDrive\Desktop\obligatorioP2\Obligatorio1\Dominio\Entidades\Articulo.cs
***********************************
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace Dominio.Entidades
{
    public class Articulo
    {

        #region Atributos
        public int Id { get; set; }
        public string NombreArt { get; set; }
        public string Categoria { get; set; }
        public decimal PrecioVenta { get; set; }
        private static int _ultimoId;
        #endregion
        #region Constructor
        public Articulo(string nombre, string categoria, decimal precioVenta)
        {
            Id = _ultimoId++;
            NombreArt = nombre;
            Categoria = categoria;
            PrecioVenta = precioVenta;
        }
        #endregion

        public void Validar()
        {
            //todo:Agregar validaciones de Articulo
        }

        public override string ToString()
        {
            string respuesta = string.Empty;

            respuesta += $"Id: {_ultimoId++} \n";
            respuesta += $"Nombre articulo: {NombreArt} \n";
            respuesta += $"Categoria: {Categoria} \n";
            respuesta += $"Precio de Venta: {PrecioVenta} \n";
            return respuesta;
        }




    }
}

***********************************
Archivo: Cliente.cs
Carpeta: C:\Users\matia\OneDrive\Desktop\obligatorioP2\Obligatorio1\Dominio\Entidades\Cliente.cs
***********************************

namespace Dominio.Entidades
{
    public class Cliente : Usuario
    {
        public decimal Saldo { get; set; }
        public Cliente(string nombre, string apellido, string email, string contrasenia, decimal saldo) :
            base(nombre, apellido, email, contrasenia)

        {
            Saldo = saldo;
        }
        public void Validar()
        {
            //todo:Agregar validaciones de Articulo
        }

        public override string ToString()
        {
            string respuesta = base.ToString();
            respuesta += $"saldo: {Saldo} \n";
            return respuesta;
        }



    }
}

***********************************
Archivo: Oferta.cs
Carpeta: C:\Users\matia\OneDrive\Desktop\obligatorioP2\Obligatorio1\Dominio\Entidades\Oferta.cs
***********************************
namespace Dominio.Entidades
{
    public class Oferta
    {
        public int Id { get; set; }  
        public int IdUser { get; set; }
        public decimal Monto { get; set; }
        public DateTime FchOfer { get; set; }
        public string Pnombre { get; set; }
        private static int _ultimoId;

        public Oferta(int id, int idUser, decimal monto, DateTime fchOfer, string pnombre)
        {
            Id = _ultimoId++;
            IdUser = idUser;
            Monto = monto;
            FchOfer = fchOfer;
            Pnombre = pnombre;
        }
    }
}

***********************************
Archivo: Publicacion.cs
Carpeta: C:\Users\matia\OneDrive\Desktop\obligatorioP2\Obligatorio1\Dominio\Entidades\Publicacion.cs
***********************************

namespace Dominio.Entidades
{
    public abstract class Publicacion
    {
        #region Atributos
        public int Id { get; set; }
        public string Nombre { get; set; }
        public string Estado { get; set; }
        public DateTime FchPublic { get; set; }
        private List<Articulo> _articulos = new List<Articulo>();
        public int IdUser { get; set; }
        public int IdPurchUser { get; set; }
        public DateTime PurchDate { get; set; }
        private static int _ultimoId;
        #endregion
        #region Constructor
        public Publicacion(int id,
                           string nombre,
                           string estado,
                           DateTime fchPublic,
                           List<Articulo> articulos,
                           int idUser,
                           int idPurchUser,
                           DateTime purchDate)
        {
            Id = _ultimoId++;
            
            Nombre = nombre;
            Estado = estado;
            FchPublic = fchPublic;
            _articulos = articulos;
            IdUser = idUser;
            IdPurchUser = idPurchUser;
            PurchDate = purchDate;
        }
        #endregion

        public void Validar()
        {
            //todo:Agregar validaciones de Articulo
        }

        public override string ToString()
        {
            string respuesta = string.Empty;

            respuesta += $"Id: {Id} \n";
            respuesta += $"Nombre: {Nombre} \n";
            respuesta += $"Estado: {Estado} \n";
            respuesta += $"Fecha de Publicacion: {FchPublic} \n";
            //respuesta += $"Lista de Articulos:  \n";
            respuesta += $"Id Usuario: {IdUser} \n";
            respuesta += $"Usuario de Compra: {IdPurchUser} \n";
            respuesta += $"Fecha de Compra: {PurchDate} \n";
            //respuesta += $"Id User: {IdUser} \n";
            return respuesta;
        }



    }
}

***********************************
Archivo: Subasta.cs
Carpeta: C:\Users\matia\OneDrive\Desktop\obligatorioP2\Obligatorio1\Dominio\Entidades\Subasta.cs
***********************************


namespace Dominio.Entidades
{
    public class Subasta : Publicacion
    {
        private List<Oferta> _ofertas;

        public Subasta(int id,
                       string nombre,
                       string estado,
                       DateTime fchPublic,
                       List<Articulo> articulos,
                       int idUser,
                       int idPurchUser,
                       DateTime purchDate,
                       List<Oferta> ofertas
                     ) : base(id, nombre, estado, fchPublic, articulos, idUser, idPurchUser, purchDate)
        {
            _ofertas = ofertas;
        }

        public void Validar()
        {
            //todo:Agregar validaciones de Articulo
        }

        public override string ToString()
        {
            string respuesta = string.Empty;

            respuesta += $"Id: {Id} \n";
            respuesta += $"Nombre: {Nombre} \n";
            respuesta += $"Estado: {Estado} \n";
            respuesta += $"Fecha de Publicacion: {FchPublic} \n";
            //respuesta += $"Lista de Articulos:  \n";
            respuesta += $"Id Usuario: {IdUser} \n";
            respuesta += $"Usuario de Compra: {IdPurchUser} \n";
            respuesta += $"Fecha de Compra: {PurchDate} \n";
            //respuesta += $"Id User: {IdUser} \n";
            return respuesta;
        }

    }
}

***********************************
Archivo: Usuario.cs
Carpeta: C:\Users\matia\OneDrive\Desktop\obligatorioP2\Obligatorio1\Dominio\Entidades\Usuario.cs
***********************************

namespace Dominio.Entidades
{
    public abstract class Usuario
    {
        private static int _ultimoId;

        public int Id { get; }
        public string Nombre { get; }
        public string Apellido { get; }
        public string Email { get; }
        public string Contrasenia { get; }
        public Usuario(string nombre, string apellido, string email, string contrasenia)
        {
            Id = _ultimoId++;
            Nombre = nombre;
            Apellido = apellido;
            Email = email;
            Contrasenia = contrasenia;
        }

        public void Validar()
        {
            //todo:Agregar validaciones de Articulo
        }

        public override string ToString()
        {
            string respuesta = string.Empty;

            respuesta += $"Nombre: {Nombre} \n";
            respuesta += $"Apellido: {Apellido} \n";
            respuesta += $"Email: {Email} \n";
            return respuesta;
        }

    }
}

***********************************
Archivo: Venta.cs
Carpeta: C:\Users\matia\OneDrive\Desktop\obligatorioP2\Obligatorio1\Dominio\Entidades\Venta.cs
***********************************



namespace Dominio.Entidades
{
    public class Venta : Publicacion
    {
        public bool OfertaR { get; set; }
        public Venta(int id,
                     string nombre,
                     string estado,
                     DateTime fchPublic,
                     List<Articulo> articulos,
                     int idUser,
                     int idPurchUser,
                     DateTime purchDate,
                     bool ofertar
            ) : base(id, nombre, estado, fchPublic, articulos, idUser, idPurchUser, purchDate)
        {
            OfertaR = ofertar;
            
        }
        public void Validar()
        {
            //todo:Agregar validaciones de Articulo
        }

        public override string ToString()
        {
            string respuesta = string.Empty;

            respuesta += $"Id: {Id} \n";
            respuesta += $"Nombre: {Nombre} \n";
            respuesta += $"Estado: {Estado} \n";
            respuesta += $"Fecha de Publicacion: {FchPublic} \n";
            //respuesta += $"Lista de Articulos:  \n";
            respuesta += $"Id Usuario: {IdUser} \n";
            respuesta += $"Usuario de Compra: {IdPurchUser} \n";
            respuesta += $"Fecha de Compra: {PurchDate} \n";
            respuesta += $"Es Oferta Relampago: {OfertaR} \n";
            return respuesta;
        }


    }
}

***********************************
Archivo: Program.cs
Carpeta: C:\Users\matia\OneDrive\Desktop\obligatorioP2\Obligatorio1\AppTest\Program.cs
***********************************



using Dominio;
using Dominio.Entidades;
namespace AppTest
{
    internal class Program
    {
        static Sistema _sistema = new Sistema();
        private static DateTime fecha;
        static void Main(string[] args)
        {
            //Validar antes de recorrer listas, que pasa si estan vacias

            int opcion = 0;
            do
            {
                MostrarTitulo("Menu");
                opcion = PedirNumero(
                    "Ingrese una opción\n" +
                    "1-Realizar precarga\n" +
                    "2-Listar Clientes\n" +
                    "3-Listar Categoria\n" +
                    "4-Alta de Articulo\n" +
                    "5-Listar Publicaciones\n" +
                    "0-salir");
                switch (opcion)
                {
                    case 1:
                        HacerPrecaraga();
                        break;
                    case 2:
                        ListarClientes();
                        break;
                    case 3:
                        ListarCategoria();
                        break;
                    case 4:
                        AltaArticulo();
                        break;
                    case 5:
                        ListarPublicaciones();
                        break;
                    default:
                        break;
                }
            }
            while (opcion != 0);
        }
        private static void HacerPrecaraga()
        {
            try
            {
                _sistema.PrecargarDatos();
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }
        private static void MostrarTitulo(string mensaje)
        {
            Console.BackgroundColor = ConsoleColor.Blue;
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine("");
            Console.WriteLine(mensaje);
            Console.WriteLine("");
            Console.BackgroundColor = ConsoleColor.Black;
        }

        private static int PedirNumero(string mensaje)
        {
            int numero = 0;
            bool seguir = false;
            do
            {
                try
                {
                    Console.WriteLine(mensaje);
                    numero = int.Parse(Console.ReadLine());
                    seguir = false;
                }
                catch (Exception)
                {
                    Console.WriteLine("Solo debe ingresar numeros.");
                    seguir = true;
                }

            } while (seguir);
            return numero;
        }

        private static string PedirString(string mensaje)
        {
            string respuesta;
            bool seguir = false;
            do
            {

                Console.WriteLine(mensaje);
                respuesta = Console.ReadLine();
                if (String.IsNullOrEmpty(respuesta))
                {
                    throw new Exception("Advertencia: Este campo no puede estar vacio");
                    seguir = true;
                }
                else
                { seguir = false; }
            } while (seguir);
            return respuesta;
        }
        public static DateTime PedirFecha()
        {
            DateTime fecha;
            bool esFechaValida = false;
            while (!esFechaValida)
            {
                Console.WriteLine("Por favor, ingrese una fecha (formato: dd/MM/yyyy):");
                string entrada = Console.ReadLine();
                if (DateTime.TryParseExact(entrada, "dd/MM/yyyy", null, System.Globalization.DateTimeStyles.None, out fecha))
                {
                    esFechaValida = true;
                    return DateTime.Parse(entrada);
                }
                else
                {
                    Console.WriteLine("Formato de fecha incorrecto. Inténtelo nuevamente.");
                }
            }
            return DateTime.Now;
        }
        private static void ListarClientes()
        {
            try
            {
                if (_sistema.Clientes.Count() > 0)
                {
                    MostrarTitulo("Listado de Clientes");
                    foreach (var cliente in _sistema.Clientes)
                    {
                        Console.WriteLine(cliente.ToString());
                    }
                }
                else { Console.WriteLine("No se encuentran clientes para listar"); }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }
        private static void ListarCategoria()
        {
            try
            {
                if (_sistema.Articulos.Count() > 0)
                {
                    string categoria = PedirString("Ingrese una categoria");
                    string salida = "No se encontraro esa categoria";
                    foreach (var art in _sistema.Articulos)
                    {
                        if (art.Categoria.ToUpper() == categoria.ToUpper())
                        {
                            salida = art.ToString();
                        }
                    }

                    Console.WriteLine(salida);
                }
                else { Console.WriteLine("No hay categorias cargadas en el sistema"); }

            }
            catch (Exception e) { Console.WriteLine(e.ToString()); }
        }
        private static void AltaArticulo()
        {
            try
            {
                string nombre = PedirString("Ingrese el nombre del articulo");
                string categoria = PedirString("Ingrese la categoria");
                int precio = PedirNumero("Ingrese el precio de venta");
                _sistema.AgregarArticulo(new Articulo(nombre, categoria, precio));
            }
            catch (Exception e) { Console.WriteLine(e.Message); };
        }
        private static void ListarVentas(DateTime fechainicio, DateTime fechafin)
        {
            try
            {

                if (_sistema.Ventas.Count() > 0)
                {
                    foreach (Venta unaVenta in _sistema.Ventas)
                    {
                        if (unaVenta.FchPublic >= fechainicio && unaVenta.FchPublic <= fechafin)
                        {
                            Console.WriteLine(unaVenta);
                            Console.WriteLine("Los articulos en venta son: ");
                            foreach (Articulo unart in _sistema.ArticulosxNombrePublicacion(unaVenta.Nombre))
                            { Console.WriteLine($"->{unart.NombreArt} -- precio: {unart.PrecioVenta}"); }
                        }
                    }
                }
                else { Console.WriteLine("No hay Ventas cargadas en el sistema"); }
            }
            catch (Exception e) { Console.WriteLine(e.Message); };
        }
        private static void ListarSubastas(DateTime fechainicio, DateTime fechafin)
        {

            if (_sistema.Subastas.Count() > 0)
            {
                foreach (Subasta unaSubasta in _sistema.Subastas)
                {
                    if (unaSubasta.FchPublic >= fechainicio && unaSubasta.FchPublic <= fechafin)
                    {
                        Console.WriteLine(unaSubasta);
                        Console.WriteLine("Los articulos subastados son: ");
                    }
                    foreach (Articulo unart in _sistema.ArticulosxNombrePublicacion(unaSubasta.Nombre))
                    {
                        Console.WriteLine($"->{unart.NombreArt}");
                    }
                }
            }
            else { Console.WriteLine("No hay Subastas cargadas en el sistema"); }
        }
        private static void ListarPublicaciones()
        {
            if (_sistema.Ventas.Count() > 0 || _sistema.Subastas.Count() > 0)
            {
                Console.WriteLine("Ingrese una fecha de inicio");
                DateTime f1 = PedirFecha();
                Console.WriteLine("Ingrese una fecha de fin");
                DateTime f2 = PedirFecha();
                ListarVentas(f1, f2);
                ListarSubastas(f1, f2);
            }
            else { Console.WriteLine("No hay Publicaciones cargadas en el sistema"); }

        }
    }
}

***********************************
Archivo: Ivalidable.cs
Carpeta: C:\Users\matia\OneDrive\Desktop\obligatorioP2\Obligatorio1\Dominio\Interfaces\IValidable.cs
***********************************

namespace Dominio.Interfaces
{
    public interface IValidable
    {
        void Validar();
    }
}

